environment {
    DOCKERHUB_CREDENTIALS = credentials('dockerhub')
    SONAR_CREDENTIALS = credentials('sonar')
    VERSION_NUMBER = sh (
        script: './wvnw help:evaluate -Dexpression=project.version -Dbuild.number=${BUILD_NUMBER} -q -DforceStdout',
        returnStdout: true).trim()
    IMAGE_NAME = "horvathsanyi/employees:${VERSION_NUMBER}"
    )
}

pipeline {
    agent {
        dockerfile {
            filename 'Dockerfile.build'
            args '-e DOCKER_CONFIG=./docker'
        }
    }
    stages {
        stage('Commit') {
            steps {
                echo 'Commit stage'
                sh './mvnw -B clean package -Dbuild.number=${BUILD_NUMBER}'
            }
        }
        stage('Acceptance') {
            steps {
                echo 'Acceptance'
                sh './mvnw -B integration-test -Dbuild.number=${BUILD_NUMBER}'
            }
        }
        stage('Docker') {
            steps {
                echo 'Docker'
                sh "docker build -f Dockerfile.layered -t ${IMAGE_NAME} ."
                sh "echo ${DOCKERHUB_CREDENTIALS_PSW} | docker login -u=${DOCKERHUB_CREDENTIALS_USR} --password-stdin"
                sh "docker push ${IMAGE_NAME}"
                sh "docker tag ${IMAGE_NAME} training360/employees:latest"
                sh "docker push training360/employees:latest"
            }
        }
        stage('Quality') {
            parallel {
                stage('E2E Tests') {
                    steps {
                        echo 'E2E Tests'
                        dir('employees-postman') {
                            sh 'rm -rf reports'
                            sh 'mkdir reports'
                            sh 'docker compose -f docker-compose.yml -f docker-compose.jenkins.yml up --abort-on-container-exit'
                            archiveArtifacts artifacts: 'reports/*.html', fingerprint: true
                        }
                    }
                }
                stage('SonarQube') {
                    steps {
                        echo 'SonarQube'
                        sh "./mvnw sonar:sonar -Dsonar.host.url=http://host.docker.internal:9000 -Dsonar.login=${SONAR_CREDENTIALS_PSW}"
                    }
                }
            }
        }
        stage('Deploy') {
            agent {
                dockerfile {
                    filename 'Dockerfile.ansible'
                }
            }
            steps {
                script {
                    env.DEFAULT_LOCAL_TMP = env.WORKSPACE_TMP
                    env.HOME = env.WORKSPACE

                    def isDeployAllowed = input(message: 'Deploy?', parameters: [
                            [$class: 'ChoiceParameterDefinition', choices: "Yes\nNo", name: 'deploy'],
                        ])
                    print("${isDeployAllowed}")
                    if (isDeployAllowed == 'No') {
                        currentBuild.result = 'ABORTED'
                        error('Manual stop.')
                    }
                }
                sshagent(credentials: ['ansible']) {
                    sh "ansible-playbook -i inventory.yml docker-playbook.yml -e imageName=${IMAGE_NAME}"
                }
            }
        }
    }
}